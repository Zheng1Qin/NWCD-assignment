{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "initial_id",
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import psycopg2\n",
    "import pandas as pd\n",
    "from sklearn.metrics import classification_report, confusion_matrix \n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Database connection parameters\n",
    "host = \"airflow\"\n",
    "dbname = \"your_dbname\"\n",
    "user = \"postgres\"\n",
    "password = \"123456\"\n",
    "port = \"5432\"\n",
    "\n",
    "# Establish the connection\n",
    "conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host, port=port)\n",
    "\n",
    "# SQL query to fetch the data\n",
    "query = \"\"\"\n",
    "SELECT\n",
    "    o.opportunity_id,\n",
    "    o.stage,\n",
    "    MAX(CASE WHEN a.activity_type = 'Communications' THEN 1 ELSE 0 END) AS communications,\n",
    "    MAX(CASE WHEN a.activity_type = 'Meetings' THEN 1 ELSE 0 END) AS meetings,\n",
    "    MAX(CASE WHEN a.activity_type = 'Showcases' THEN 1 ELSE 0 END) AS showcases,\n",
    "    MAX(CASE WHEN a.activity_type = 'Site Visits' THEN 1 ELSE 0 END) AS site_visits,\n",
    "    o.forecast_amount as forecast_amount,\n",
    "    o.launch_date as launch_date\n",
    "FROM\n",
    "    (select * from dw_crm_opportunity where partition_date in (select MAX(partition_date) from dw_crm_opportunity)) o\n",
    "JOIN\n",
    "    (select * from dw_crm_activity where partition_date in (select MAX(partition_date) from dw_crm_activity)) a ON o.opportunity_id = a.opportunity_id\n",
    "LEFT JOIN\n",
    "    (select * from dw_billing_detail where partition_date in (select MAX(partition_date) from dw_billing_detail)) b ON o.account_id = b.account_id\n",
    "GROUP BY\n",
    "    o.opportunity_id,\n",
    "    o.stage,\n",
    "    b.account_id\n",
    "\"\"\"\n",
    "\n",
    "# Execute the query and load data into a DataFrame\n",
    "data = pd.read_sql_query(query, conn)\n",
    "\n",
    "# Close the connection\n",
    "conn.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "data.dropna(inplace=True) \n",
    "\n",
    "features = data[['stage', 'activity_type']]\n",
    "target = data['paid']  # Assuming 'paid' is a binary column indicating if the opportunity came true\n",
    "\n",
    "features_encoded = pd.get_dummies(features, columns=['stage', 'activity_type'])"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "8a525084a900fcfb"
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(features_encoded, target, test_size=0.3, random_state=42)\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "model = LogisticRegression()\n"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "2636cb23b41621f1"
  },
  {
   "cell_type": "code",
   "outputs": [],
   "source": [
    "model.fit(X_train_scaled, y_train)\n",
    "\n",
    "\n",
    "\n",
    "y_pred = model.predict(X_test_scaled)\n",
    "\n",
    "# Print the classification report and confusion matrix\n",
    "print(classification_report(y_test, y_pred))\n",
    "print(confusion_matrix(y_test, y_pred))\n"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "7716bde13b995556"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
